/* scheduling channels */
urgent chan insert;
broadcast chan cnt;
urgent broadcast chan up, en;

/* scheduling constants & global variables */
int nc := 4 ;
int rel_count := 0;
int len:= 0;
const int size_sched := 10 ;
int w[size_sched] := { -2, -2, -2, -2, -2, -2, -2, -2, -2, -2 };
int p[size_sched] := { -2, -2, -2, -2, -2, -2, -2, -2, -2, -2 };
int T[size_sched] := { -2, -2, -2, -2, -2, -2, -2, -2, -2, -2 };
const int period[size_sched] := { 100, 200, 10, 50, 200, 200, 10, 100, 200, 50 };
const int wcet[size_sched] := { 39, 11, 1, 2, 57, 6, 1, 19, 20, 6 };

/* constants & global variables */
bool timer_values[size_sched] := { false, false, false, false, false, false, false, false, false, false };

/* scheduling functions */
void update_queue (int &T[size_sched], int &p[size_sched], int &w[size_sched]) {
    int i;
    for (i:= 0; i<size_sched; i++) {
	    if (p[i] >= 0) {
	    T[p[i]]:= period[i] - w[i];}
    }
}

void dequeue (int &T[size_sched], int &p[size_sched]) {
    int i;
    int i_m:= 0;
    int m:= T[0];

    /* find the cell corresponding to the task to dequeue */
    for (i:= 1; i<len; i++) {
        if (T[i] < m) {
            i_m:= i;
            m:= T[i];
        }
    }
    /* shift tasks indices */
    for (i:= 0; i<size_sched; i++) {
        if (p[i] == i_m) {
            p[i]:= -1;
        } else if (p[i] > i_m) {
            p[i]--;
        }
    }
    /* shift priorities values */
    for (i:= i_m+1; i<len; i++) {
        T[i-1]:= T[i];
    }
    T[i-1] := -2;
}

/* Process scheduler */
process pScheduler(urgent chan &insert, urgent broadcast chan &up, urgent broadcast chan &en, broadcast chan &cnt) {
	state
    	start,
	    update,
    	give;
	commit
    	update,
	    give;
	init
    	start;
	trans
    	start -> start {
    		guard len< size_sched;
    		sync insert?;
    		assign len++;
    	},
	    start -> update {
	    	guard len>0 && nc>0;
	    	sync up!;
	    	assign rel_count:= 0;
	    },
    	update -> update {
    		guard rel_count < len;
    		sync cnt!;
    	},
	    update -> give {
	    	guard rel_count == len;
	    	assign update_queue(T,p,w), dequeue(T,p);
	    },
    	give -> start {
    		sync en!;
    		assign len--, nc--;
    	};
}

/* process pTimer */
process pTimer(int idx_task) {
    clock x;
    state
        start {
            x <= period[idx_task]
        };
    init
        start;
    trans
        start -> start {
            guard x == period[idx_task];
            assign timer_values[idx_task] := true, x := 0;
        };
}

/* process pTask*/
process pTask(int idx_task, urgent chan &insert, urgent broadcast chan &up, urgent broadcast chan &en, broadcast chan &cnt) {
    clock x;
    state
        start,
        manage{
            x <= wcet[idx_task]
        },
        ask {
            x<= 1
        },
        decide;
    commit
        decide;
    init
        start;
    trans
        start -> ask {
            guard timer_values[idx_task];
            sync insert!;
            assign p[idx_task] := len, x := 0,
                w[idx_task] := 0, timer_values[idx_task] := false;
        },
        ask -> ask {
            guard x == 1;
            assign x := 0, w[idx_task] := w[idx_task] + 1 ;
        },
        ask -> decide {
            sync up?;
        },
        decide -> ask {
            guard p[idx_task]!= -1;
            sync en?;
            assign x := 0 ;
        },
        decide -> manage {
            guard p[idx_task] == -1;
            sync en?;
            assign p[idx_task]:= -2, x := 0;
        },
        manage -> start {
            guard x > 0;
            assign nc++;
        };
}
/* instantiations */
timer_task_0 := pTimer(0);
task_0 := pTask(0, insert, up, en, cnt);
timer_task_1 := pTimer(1);
task_1 := pTask(1, insert, up, en, cnt);
timer_task_2 := pTimer(2);
task_2 := pTask(2, insert, up, en, cnt);
timer_task_3 := pTimer(3);
task_3 := pTask(3, insert, up, en, cnt);
timer_task_4 := pTimer(4);
task_4 := pTask(4, insert, up, en, cnt);
timer_task_5 := pTimer(5);
task_5 := pTask(5, insert, up, en, cnt);
timer_task_6 := pTimer(6);
task_6 := pTask(6, insert, up, en, cnt);
timer_task_7 := pTimer(7);
task_7 := pTask(7, insert, up, en, cnt);
timer_task_8 := pTimer(8);
task_8 := pTask(8, insert, up, en, cnt);
timer_task_9 := pTimer(9);
task_9 := pTask(9, insert, up, en, cnt);

scheduler:= pScheduler(insert, up, en, cnt);

system 
scheduler, task_0, task_1, task_2, task_3, task_4, task_5, task_6, task_7, task_8, task_9;